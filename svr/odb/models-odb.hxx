// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef MODELS_ODB_HXX
#define MODELS_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20300UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "models.h"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // Member
  //
  template <>
  struct class_traits< ::Member >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::Member >
  {
    public:
    typedef ::Member object_type;
    typedef ::std::shared_ptr< ::Member > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::size_t id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // RelationNetwork
  //
  template <>
  struct class_traits< ::RelationNetwork >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::RelationNetwork >
  {
    public:
    typedef ::RelationNetwork object_type;
    typedef ::std::shared_ptr< ::RelationNetwork > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::size_t id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Group
  //
  template <>
  struct class_traits< ::Group >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::Group >
  {
    public:
    typedef ::Group object_type;
    typedef ::std::shared_ptr< ::Group > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::size_t id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Msg
  //
  template <>
  struct class_traits< ::Msg >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::Msg >
  {
    public:
    typedef ::Msg object_type;
    typedef ::std::shared_ptr< ::Msg > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::size_t id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // Member
  //
  template <typename A>
  struct query_columns< ::Member, id_mysql, A >
  {
    // name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    name_type_;

    static const name_type_ name;

    // pwd
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    pwd_type_;

    static const pwd_type_ pwd;

    // ip
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    ip_type_;

    static const ip_type_ ip;

    // port
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        short unsigned int,
        mysql::id_ushort >::query_type,
      mysql::id_ushort >
    port_type_;

    static const port_type_ port;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::size_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

  template <typename A>
  const typename query_columns< ::Member, id_mysql, A >::name_type_
  query_columns< ::Member, id_mysql, A >::
  name (A::table_name, "`name`", 0);

  template <typename A>
  const typename query_columns< ::Member, id_mysql, A >::pwd_type_
  query_columns< ::Member, id_mysql, A >::
  pwd (A::table_name, "`pwd`", 0);

  template <typename A>
  const typename query_columns< ::Member, id_mysql, A >::ip_type_
  query_columns< ::Member, id_mysql, A >::
  ip (A::table_name, "`ip`", 0);

  template <typename A>
  const typename query_columns< ::Member, id_mysql, A >::port_type_
  query_columns< ::Member, id_mysql, A >::
  port (A::table_name, "`port`", 0);

  template <typename A>
  const typename query_columns< ::Member, id_mysql, A >::id_type_
  query_columns< ::Member, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  struct pointer_query_columns< ::Member, id_mysql, A >:
    query_columns< ::Member, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::Member, id_mysql >:
    public access::object_traits< ::Member >
  {
    public:
    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // _name
      //
      details::buffer _name_value;
      unsigned long _name_size;
      my_bool _name_null;

      // _pwd
      //
      details::buffer _pwd_value;
      unsigned long _pwd_size;
      my_bool _pwd_null;

      // _ip
      //
      details::buffer _ip_value;
      unsigned long _ip_size;
      my_bool _ip_null;

      // _port
      //
      unsigned short _port_value;
      my_bool _port_null;

      // _id
      //
      unsigned long long _id_value;
      my_bool _id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 5UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::Member, id_common >:
    public access::object_traits_impl< ::Member, id_mysql >
  {
  };

  // RelationNetwork
  //
  template <typename A>
  struct pointer_query_columns< ::RelationNetwork, id_mysql, A >
  {
    // x
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::size_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    x_type_;

    static const x_type_ x;

    // y
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::size_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    y_type_;

    static const y_type_ y;

    // w
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        short int,
        mysql::id_short >::query_type,
      mysql::id_short >
    w_type_;

    static const w_type_ w;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::size_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

  template <typename A>
  const typename pointer_query_columns< ::RelationNetwork, id_mysql, A >::x_type_
  pointer_query_columns< ::RelationNetwork, id_mysql, A >::
  x (A::table_name, "`x`", 0);

  template <typename A>
  const typename pointer_query_columns< ::RelationNetwork, id_mysql, A >::y_type_
  pointer_query_columns< ::RelationNetwork, id_mysql, A >::
  y (A::table_name, "`y`", 0);

  template <typename A>
  const typename pointer_query_columns< ::RelationNetwork, id_mysql, A >::w_type_
  pointer_query_columns< ::RelationNetwork, id_mysql, A >::
  w (A::table_name, "`w`", 0);

  template <typename A>
  const typename pointer_query_columns< ::RelationNetwork, id_mysql, A >::id_type_
  pointer_query_columns< ::RelationNetwork, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <>
  class access::object_traits_impl< ::RelationNetwork, id_mysql >:
    public access::object_traits< ::RelationNetwork >
  {
    public:
    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // _x
      //
      unsigned long long _x_value;
      my_bool _x_null;

      // _y
      //
      unsigned long long _y_value;
      my_bool _y_null;

      // _w
      //
      short _w_value;
      my_bool _w_null;

      // _id
      //
      unsigned long long _id_value;
      my_bool _id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct x_tag;
    struct y_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::RelationNetwork, id_common >:
    public access::object_traits_impl< ::RelationNetwork, id_mysql >
  {
  };

  // Group
  //
  template <typename A>
  struct query_columns< ::Group, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::size_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;

    // name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    name_type_;

    static const name_type_ name;
  };

  template <typename A>
  const typename query_columns< ::Group, id_mysql, A >::id_type_
  query_columns< ::Group, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::Group, id_mysql, A >::name_type_
  query_columns< ::Group, id_mysql, A >::
  name (A::table_name, "`name`", 0);

  template <typename A>
  struct pointer_query_columns< ::Group, id_mysql, A >:
    query_columns< ::Group, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::Group, id_mysql >:
    public access::object_traits< ::Group >
  {
    public:
    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // _id
      //
      unsigned long long _id_value;
      my_bool _id_null;

      // _name
      //
      details::buffer _name_value;
      unsigned long _name_size;
      my_bool _name_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // _members
    //
    struct members_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::list< ::std::shared_ptr< ::Member > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< members_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        unsigned long long index_value;
        my_bool index_null;

        // value
        //
        unsigned long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::Group, id_common >:
    public access::object_traits_impl< ::Group, id_mysql >
  {
  };

  // Msg
  //
  template <typename A>
  struct pointer_query_columns< ::Msg, id_mysql, A >
  {
    // from
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::size_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    from_type_;

    static const from_type_ from;

    // content
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    content_type_;

    static const content_type_ content;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::size_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

  template <typename A>
  const typename pointer_query_columns< ::Msg, id_mysql, A >::from_type_
  pointer_query_columns< ::Msg, id_mysql, A >::
  from (A::table_name, "`from`", 0);

  template <typename A>
  const typename pointer_query_columns< ::Msg, id_mysql, A >::content_type_
  pointer_query_columns< ::Msg, id_mysql, A >::
  content (A::table_name, "`content`", 0);

  template <typename A>
  const typename pointer_query_columns< ::Msg, id_mysql, A >::id_type_
  pointer_query_columns< ::Msg, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <>
  class access::object_traits_impl< ::Msg, id_mysql >:
    public access::object_traits< ::Msg >
  {
    public:
    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // _from
      //
      unsigned long long _from_value;
      my_bool _from_null;

      // _content
      //
      details::buffer _content_value;
      unsigned long _content_size;
      my_bool _content_null;

      // _id
      //
      unsigned long long _id_value;
      my_bool _id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // _to
    //
    struct to_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::list< ::odb::lazy_shared_ptr< ::Member > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< to_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        unsigned long long index_value;
        my_bool index_null;

        // value
        //
        unsigned long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    struct from_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::Msg, id_common >:
    public access::object_traits_impl< ::Msg, id_mysql >
  {
  };

  // Member
  //
  // RelationNetwork
  //
  template <>
  struct alias_traits<
    ::Member,
    id_mysql,
    access::object_traits_impl< ::RelationNetwork, id_mysql >::x_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::Member,
    id_mysql,
    access::object_traits_impl< ::RelationNetwork, id_mysql >::y_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::RelationNetwork, id_mysql >
  {
    // x
    //
    typedef
    odb::alias_traits<
      ::Member,
      id_mysql,
      access::object_traits_impl< ::RelationNetwork, id_mysql >::x_tag>
    x_alias_;

    // y
    //
    typedef
    odb::alias_traits<
      ::Member,
      id_mysql,
      access::object_traits_impl< ::RelationNetwork, id_mysql >::y_tag>
    y_alias_;
  };

  template <typename A>
  struct query_columns< ::RelationNetwork, id_mysql, A >:
    query_columns_base< ::RelationNetwork, id_mysql >
  {
    // x
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::size_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    x_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::Member,
        id_mysql,
        x_alias_ > >
    x_pointer_type_;

    struct x_type_: x_pointer_type_, x_column_type_
    {
      x_type_ (const char* t, const char* c, const char* conv)
        : x_column_type_ (t, c, conv)
      {
      }
    };

    static const x_type_ x;

    // y
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::size_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    y_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::Member,
        id_mysql,
        y_alias_ > >
    y_pointer_type_;

    struct y_type_: y_pointer_type_, y_column_type_
    {
      y_type_ (const char* t, const char* c, const char* conv)
        : y_column_type_ (t, c, conv)
      {
      }
    };

    static const y_type_ y;

    // w
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        short int,
        mysql::id_short >::query_type,
      mysql::id_short >
    w_type_;

    static const w_type_ w;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::size_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

  template <typename A>
  const typename query_columns< ::RelationNetwork, id_mysql, A >::x_type_
  query_columns< ::RelationNetwork, id_mysql, A >::
  x (A::table_name, "`x`", 0);

  template <typename A>
  const typename query_columns< ::RelationNetwork, id_mysql, A >::y_type_
  query_columns< ::RelationNetwork, id_mysql, A >::
  y (A::table_name, "`y`", 0);

  template <typename A>
  const typename query_columns< ::RelationNetwork, id_mysql, A >::w_type_
  query_columns< ::RelationNetwork, id_mysql, A >::
  w (A::table_name, "`w`", 0);

  template <typename A>
  const typename query_columns< ::RelationNetwork, id_mysql, A >::id_type_
  query_columns< ::RelationNetwork, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  // Group
  //
  // Msg
  //
  template <>
  struct alias_traits<
    ::Member,
    id_mysql,
    access::object_traits_impl< ::Msg, id_mysql >::from_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::Msg, id_mysql >
  {
    // from
    //
    typedef
    odb::alias_traits<
      ::Member,
      id_mysql,
      access::object_traits_impl< ::Msg, id_mysql >::from_tag>
    from_alias_;
  };

  template <typename A>
  struct query_columns< ::Msg, id_mysql, A >:
    query_columns_base< ::Msg, id_mysql >
  {
    // from
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::size_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    from_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::Member,
        id_mysql,
        from_alias_ > >
    from_pointer_type_;

    struct from_type_: from_pointer_type_, from_column_type_
    {
      from_type_ (const char* t, const char* c, const char* conv)
        : from_column_type_ (t, c, conv)
      {
      }
    };

    static const from_type_ from;

    // content
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    content_type_;

    static const content_type_ content;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::size_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;
  };

  template <typename A>
  const typename query_columns< ::Msg, id_mysql, A >::from_type_
  query_columns< ::Msg, id_mysql, A >::
  from (A::table_name, "`from`", 0);

  template <typename A>
  const typename query_columns< ::Msg, id_mysql, A >::content_type_
  query_columns< ::Msg, id_mysql, A >::
  content (A::table_name, "`content`", 0);

  template <typename A>
  const typename query_columns< ::Msg, id_mysql, A >::id_type_
  query_columns< ::Msg, id_mysql, A >::
  id (A::table_name, "`id`", 0);
}

#include "models-odb.ixx"

#include <odb/post.hxx>

#endif // MODELS_ODB_HXX
